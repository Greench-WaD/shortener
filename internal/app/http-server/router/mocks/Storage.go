// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/Igorezka/shortener/internal/app/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CheckConnect provides a mock function with given fields: ctx
func (_m *Storage) CheckConnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CheckConnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURL provides a mock function with given fields: ctx, id
func (_m *Storage) GetURL(ctx context.Context, id string) (string, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserURLS provides a mock function with given fields: ctx, baseURL, userID
func (_m *Storage) GetUserURLS(ctx context.Context, baseURL string, userID string) ([]models.UserBatchLink, error) {
	ret := _m.Called(ctx, baseURL, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserURLS")
	}

	var r0 []models.UserBatchLink
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]models.UserBatchLink, error)); ok {
		return rf(ctx, baseURL, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []models.UserBatchLink); ok {
		r0 = rf(ctx, baseURL, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserBatchLink)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, baseURL, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBatchURL provides a mock function with given fields: ctx, baseURL, batch, userID
func (_m *Storage) SaveBatchURL(ctx context.Context, baseURL string, batch []models.BatchLinkRequest, userID string) ([]models.BatchLinkResponse, error) {
	ret := _m.Called(ctx, baseURL, batch, userID)

	if len(ret) == 0 {
		panic("no return value specified for SaveBatchURL")
	}

	var r0 []models.BatchLinkResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.BatchLinkRequest, string) ([]models.BatchLinkResponse, error)); ok {
		return rf(ctx, baseURL, batch, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.BatchLinkRequest, string) []models.BatchLinkResponse); ok {
		r0 = rf(ctx, baseURL, batch, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BatchLinkResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []models.BatchLinkRequest, string) error); ok {
		r1 = rf(ctx, baseURL, batch, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveURL provides a mock function with given fields: ctx, link, userID
func (_m *Storage) SaveURL(ctx context.Context, link string, userID string) (string, error) {
	ret := _m.Called(ctx, link, userID)

	if len(ret) == 0 {
		panic("no return value specified for SaveURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, link, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, link, userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, link, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
